@page "/"
@using Radzen
@using Radzen.Blazor

@* Intro *@
@if (!started)
{
    <div class="intro-screen">
        <h1 class="app-title">Weekend Energy Tracker</h1>
        <button class="btn btn-primary btn-lg" @onclick="() => started = true">Start</button>
    </div>
}
else
{
    <div class="container py-4 main-ui">


<div class="row mb-4">
  <div class="col-12"><h4>Saturday</h4></div>

  @foreach(var cat in Categories)
  {
    <div class="col-6 col-md-3 text-center">
      <Radzen.Blazor.RadzenKnob 
        TValue="int"
        Min="0" Max="24" Step="1"
        Value="@SaturdayHours[cat]"
        Change="@( (int val) => SaturdayHours[cat] = val )"
        Style="width:80px; height:80px;" />
      <div class="mt-2">
        <strong>@cat</strong><br />
        @SaturdayHours[cat] hrs
      </div>
    </div>
  }
</div>


<div class="row mb-4">
  <div class="col-12"><h4>Sunday</h4></div>

  @foreach(var cat in Categories)
  {
    <div class="col-6 col-md-3 text-center">
      <RadzenKnob 
        TValue="int"
        Min="0" Max="24" Step="1"
        Value="@SundayHours[cat]"
        Change="@( (int val) => SundayHours[cat] = val )"
        Style="width:80px; height:80px;" />
      <div class="mt-2">
        <strong>@cat</strong><br />
        @SundayHours[cat] hrs
      </div>
    </div>
  }
</div>



        <button class="btn btn-success w-100" @onclick="ShowMoodSummary">
            Show Mood Summary
        </button>

        @if (!string.IsNullOrEmpty(MoodSummary))
        {
            <div class="alert alert-info text-center mt-4">
                @MoodSummary
            </div>
        }
    </div>
}
@code {
    private bool started = false;

    private string[] Categories = { "Creative", "Rest", "Social", "Errands" };
    private Dictionary<string, int> SaturdayHours = new();
    private Dictionary<string, int> SundayHours = new();
    private string MoodSummary;

    protected override void OnInitialized()
    {
        foreach (var c in Categories)
        {
            SaturdayHours[c] = 0;
            SundayHours[c] = 0;
        }
    }

    private int GetTotalHours(Dictionary<string, int> d)
      => d.Values.Sum();

    private void ShowMoodSummary()
    {
        var total = GetTotalHours(SaturdayHours) + GetTotalHours(SundayHours);
        if (total == 0)
        {
            MoodSummary = "Please log some hours first.";
            return;
        }
        var combined = Categories.ToDictionary(
          cat => cat,
          cat => SaturdayHours[cat] + SundayHours[cat]
        );
        var pct = combined.ToDictionary(
          kv => kv.Key,
          kv => (double)kv.Value / total * 100
        );

        if (pct["Rest"] > 50) MoodSummary = "🛌 Cozy Recharge: You prioritized rest.";
        else if (pct["Creative"] > 40) MoodSummary = "🎨 Flow Mode: You spent a lot of time being creative.";
        else if (pct["Social"] > 40) MoodSummary = "💬 Sparked Up: Social connections fueled your weekend.";
        else if (pct["Creative"] + pct["Rest"] > 70)
            MoodSummary = "🌙 Chill Creator: Creativity + rest in harmony.";
        else MoodSummary = "⚠️ Scattered Energy: Your weekend was varied.";
    }
}
